Go providers
============

.. _providers: https://docs.bazel.build/versions/master/skylark/rules.html#providers

.. _go_library: core.rst#go_library
.. _go_binary: core.rst#go_binary
.. _go_test: core.rst#go_test
.. _cc_library: https://docs.bazel.build/versions/master/be/c-cpp.html#cc_library
.. _flatbuffers: http://google.github.io/flatbuffers/
.. _static linking: modes.rst#building-static-binaries
.. _race detector: modes.rst#using-the-race-detector
.. _runfiles: https://docs.bazel.build/versions/master/skylark/lib/runfiles.html

.. role:: param(kbd)
.. role:: type(emphasis)
.. role:: value(code)
.. |mandatory| replace:: **mandatory value**


The providers_ are the outputs of the rules, you generaly get them by having a dependency on a rule,
and then asking for a provider of a specific type.

.. contents:: :depth: 2

-----

Design
------

The Go providers are designed primarily for the efficiency of the Go rules, the information they
share is mostly there because it is required for the core rules to work.

All the providers are designed to hold only immutable data. This is partly because its a cleaner
design choice to be able to assume a provider will never change, but also because only immutable
objects are allowed to be stored in a depset, and it's really useful to have depsets of providers.
Specifically the :param:`direct` and :param:`transitive` fields on GoLibrary_ only work because
it is immutable.

API
---

GoLibrary
~~~~~~~~~

GoLibrary is the provider exposed by the go_library_ rule, or anything that wants to behave like one.
In general you should build these using the new_go_library helper function.
It provides all the information requried as inputs to building an archive.
It can also be used to just provide sources and deps (for use in the embed attribute). There are
two main uses for this.
This is a non build mode specific provider.

#. Recompiling a library with additional sources.
   go_library_ returns a GoLibrary provider with the original sources and deps that it was
   consuming.
   go_test_ uses this to recompile the library with additional test files, to build the test
   version of the library. You can use the same feature to recompile a proto library with
   additional sources that were not generated by the proto compiler.

#. Providing the dependencies for generated code.
   If you wanted to use flatbuffers_ in your code, and you had a custom rule that ran the
   flatbuffers compiler to generate the serialization functions, you might hit the issue that
   the only thing that knows you depend on ``github.com/google/flatbuffers/go`` is the generated
   code.
   You can instead have the generator return a GoLibrary provider instead of just the generated
   files, allowing you to tie the generated files to the additional dependencies they add to
   any package trying to compile them.


+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`name`                  | :type:`The package name for the sources.`                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`label`                 | :type:`The label of the rule that generated the library.`       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`importpath`            | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The import path for this library. Will always be set.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`pathtype`              | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| Information about the source of the importpath.                                                  |
| It's values can be                                                                               |
| :value:`explicit`                                                                                |
|     The importpath was explicitly supplied by the user and the library is importable.            |
|     This is the normal case.                                                                     |
| :value:`inferred`                                                                                |
|     The importpath was inferred from the directory structure and rule name. The library may be   |
|     importable.                                                                                  |
|     This is normally true for rules that do not expect to be compiled directly to a library,     |
|     embeded into another rule instead (source generators)                                        |
| :value:`export`                                                                                  |
|     The importpath is used for generated file names, but the library should not be imported by   |
|     that name.                                                                                   |
|     This is the case for the implied "main" library of a binary or test, where the import path   |
|     is not relevant as the package cannot be imported.                                           |
+--------------------------------+-----------------------------------------------------------------+
| :param:`resolve`               | :type:`function`                                                |
+--------------------------------+-----------------------------------------------------------------+
| The function that can be called to resolve this library to a mode specific GoSource.             |
+--------------------------------+-----------------------------------------------------------------+


GoSource
~~~~~~~~

GoSource represents a GoLibrary after mode specific processing, ready to build a GoArchive.
In general, only rules_go should need to build or handle these.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`library`               | :type:`GoLibrary`                                               |
+--------------------------------+-----------------------------------------------------------------+
| The go library that this GoSource was generated from.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`srcs`                  | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The sources to compile into the archive.                                                         |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cover`                 | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The set of sources that should have coverage applied.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`x_defs`                | :type:`string_dict`                                             |
+--------------------------------+-----------------------------------------------------------------+
| Map of defines to add to the go link command.                                                    |
+--------------------------------+-----------------------------------------------------------------+
| :param:`deps`                  | :type:`list of GoLibrary`                                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct dependencies needed by the :param:`srcs`.                                             |
+--------------------------------+-----------------------------------------------------------------+
| :param:`gc_goopts`             | :type:`list of string`                                          |
+--------------------------------+-----------------------------------------------------------------+
| Go compilation options that should be used when compiling these sources.                         |
| In general these will be used for *all* sources of any library this provider is embedded into.   |
+--------------------------------+-----------------------------------------------------------------+
| :param:`runfiles`              | :type:`Runfiles`                                                |
+--------------------------------+-----------------------------------------------------------------+
| The set of files needed by code in these sources at runtime.                                     |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_deps`              | :type:`list of cc_library`                                      |
+--------------------------------+-----------------------------------------------------------------+
| The direct cgo dependencies of this library.                                                     |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_exports`           | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The exposed cc headers for these sources.                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_archive`           | :type:`File`                                                    |
+--------------------------------+-----------------------------------------------------------------+
| The cgo archive to merge into a go archive for these sources.                                    |
+--------------------------------+-----------------------------------------------------------------+


GoArchiveData
~~~~~~~~~~~~~

GoArchiveData represents the compiled form of a package.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`name`                  | :type:`The package name for the sources.`                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`label`                 | :type:`The label of the rule that generated the library.`       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`importpath`            | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The import path for this library. Will always be set.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`file`                  | :type:`compiled archive file`                                   |
+--------------------------------+-----------------------------------------------------------------+
| The archive file representing the library compiled in a specific :param:`mode` ready for linking |
| into binaries.                                                                                   |
+--------------------------------+-----------------------------------------------------------------+
| :param:`srcs`                  | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The sources compiled into the archive.                                                           |
+--------------------------------+-----------------------------------------------------------------+
| :param:`searchpath`            | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The search path entry under which the :param:`lib` would be found.                               |
+--------------------------------+-----------------------------------------------------------------+

GoArchive
~~~~~~~~~

GoArchive is a provider that exposes a compiled library along with it's full transitive
dependencies.
This is used when compiling and linking dependant libraries or binaries.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`source`                | :type:`GoSource`                                                |
+--------------------------------+-----------------------------------------------------------------+
| The source provider this GoArchive was compiled from.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`data`                  | :type:`GoArchiveData`                                           |
+--------------------------------+-----------------------------------------------------------------+
| The non transitive data for this archive.                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`direct`                | :type:`depset of GoLibrary`                                     |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`searchpaths`           | :type:`depset of string`                                        |
+--------------------------------+-----------------------------------------------------------------+
| The transitive set of search paths needed to link with this archive.                             |
+--------------------------------+-----------------------------------------------------------------+
| :param:`libs`                  | :type:`depset of File`                                          |
+--------------------------------+-----------------------------------------------------------------+
| The transitive set of libraries needed to link with this archive.                                |
+--------------------------------+-----------------------------------------------------------------+
| :param:`transitive`            | :type:`depset(GoLibrary)`                                       |
+--------------------------------+-----------------------------------------------------------------+
| The full transitive set of GoArchiveData's  depended on, including this one.                     |
+--------------------------------+-----------------------------------------------------------------+
| :param:`x_defs`                | :type:`string_dict`                                             |
+--------------------------------+-----------------------------------------------------------------+
| The full transitive set of defines to add to the go link command.                                |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_deps`              | :type:`depset(cc_library)`                                      |
+--------------------------------+-----------------------------------------------------------------+
| The direct cgo dependencies of this library.                                                     |
| This has the same constraints as things that can appear in the deps of a cc_library_.            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_exports`           | :type:`depset of GoSource`                                      |
+--------------------------------+-----------------------------------------------------------------+
| The the transitive set of c headers needed to reference exports of this archive.                 |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cover_vars`            | :type:`list of string`                                          |
+--------------------------------+-----------------------------------------------------------------+
| The cover variables added to this library.                                                       |
+--------------------------------+-----------------------------------------------------------------+
| :param:`runfiles`              | runfiles_                                                       |
+--------------------------------+-----------------------------------------------------------------+
| The files needed to run anything that includes this library.                                     |
+--------------------------------+-----------------------------------------------------------------+
