load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test", "go_binary", "go_source")
load("@io_bazel_rules_go//tests:bazel_tests.bzl", "bazel_test")
load(":generate_test.bzl", "generate_script")

go_library(
    name = "go_default_library",
    srcs = ["race.go"],
    importpath = "github.com/bazelbuild/rules_go/tests/race",
    deps = ["//tests/legacy/race/racy:go_default_library"],
)

go_binary(
    name = "race_main",
    srcs = ["race_main.go"],
    deps = [":go_default_library"],
)

go_source(
    name = "race_test",
    srcs = ["race_test.go"],
    embed = [":go_default_library"],
)

go_test(
    name = "race_auto_test",
    size = "small",
    embed = [":race_test"],
)

go_test(
    name = "race_on_tester",
    size = "small",
    embed = [":race_test"],
    race = "on",
    tags = ["manual"],
)

generate_script(
    name = "race_on_test_script",
    testonly = True,
    binary = ":race_on_tester",
)

sh_test(
    name = "race_on_test",
    size = "small",
    srcs = [":race_on_test_script"],
    data = [":race_on_tester"],
)

bazel_test(
    name = "race_feature",
    args = ["--features=race"],
    check = """
if [ "$result" -eq 0 ]; then
  echo "error: test succeeded unexpectedly" >&2
  result=1
else
  result=0
fi
""",
    command = "test",
    targets = [":race_auto_test"],
)
