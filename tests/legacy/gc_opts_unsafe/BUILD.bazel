load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@io_bazel_rules_go//tests:bazel_tests.bzl", "bazel_test")

go_library(
    name = "unsafe_srcs_lib",
    srcs = ["unsafe.go"],
    gc_goopts = ["-u"],
    importpath = "github.com/bazelbuild/rules_go/tests/gc_opts_unsafe",
    tags = ["manual"],
)

go_library(
    name = "unsafe_library_lib",
    embed = [":unsafe_srcs_lib"],
    importpath = "github.com/bazelbuild/rules_go/tests/gc_opts_unsafe",
    tags = ["manual"],
)

go_binary(
    name = "unsafe_srcs_bin",
    srcs = [
        "empty_main.go",
        "unsafe.go",
    ],
    gc_goopts = ["-u"],
    tags = ["manual"],
)

go_binary(
    name = "unsafe_library_bin",
    srcs = ["empty_main.go"],
    embed = [":unsafe_srcs_lib"],
    tags = ["manual"],
)

go_test(
    name = "unsafe_srcs_test",
    size = "small",
    srcs = [
        "empty_test.go",
        "unsafe.go",
    ],
    gc_goopts = ["-u"],
    tags = ["manual"],
)

go_test(
    name = "unsafe_library_test",
    size = "small",
    embed = [":unsafe_srcs_lib"],
    tags = ["manual"],
)

go_library(
    name = "unsafe_cgo_lib",
    srcs = ["unsafe_cgo.go"],
    cgo = True,
    gc_goopts = ["-u"],
    importpath = "github.com/bazelbuild/rules_go/tests/gc_opts_unsafe",
    tags = ["manual"],
)

go_library(
    name = "unsafe_cgo_client_lib",
    embed = [":unsafe_cgo_lib"],
    importpath = "github.com/bazelbuild/rules_go/tests/gc_opts_unsafe",
    tags = ["manual"],
)

go_binary(
    name = "unsafe_link_bin",
    srcs = [
        "empty_main.go",
        "unsafe.go",
    ],
    gc_linkopts = ["-u"],
    tags = ["manual"],
)

go_test(
    name = "unsafe_link_test",
    size = "small",
    srcs = [
        "empty_test.go",
        "unsafe.go",
    ],
    gc_linkopts = ["-u"],
    tags = ["manual"],
)

[
    bazel_test(
        name = "check_" + test,
        check = """
if [ "$result" -eq 0 ]; then
  echo "error: build succeeded unexpectedly" >&2
  result=1
else
  result=0
fi
if ! grep -q "{0}" bazel-output.txt; then
  echo "error: build failed for incorrect reason, expected {0}" >&2
  result=1
fi
""".format(message),
        command = "test",
        targets = [":" + test],
    )
    for test, message in [
        ("unsafe_srcs_lib", "cannot import package unsafe"),
        ("unsafe_library_lib", "cannot import package unsafe"),
        ("unsafe_srcs_bin", "cannot import package unsafe"),
        ("unsafe_library_bin", "cannot import package unsafe"),
        ("unsafe_srcs_test", "cannot import package unsafe"),
        ("unsafe_library_test", "cannot import package unsafe"),
        ("unsafe_cgo_lib", "cannot import package unsafe"),
        ("unsafe_cgo_client_lib", "cannot import package unsafe"),
        ("unsafe_link_bin", "load of unsafe package"),
        ("unsafe_link_test", "load of unsafe package"),
    ]
]
